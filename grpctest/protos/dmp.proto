syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.miotech.dmp";
option java_outer_classname = "MioyingDataPlatform";

package com.mioying.data.models.protobuf;

// --------Basic structure----------

message TradingCalendar {
    int64 calendarDate = 1;
    bool isOpen = 2;
    int64 prevTradingDate = 3;
    bool isWeekEnd = 4;
    bool isMonthEnd = 5;
    bool isQuarterEnd = 6;
    bool isYearEnd = 7;
}

message Range {
    float start = 1;
    float end = 2;
}

message Timezone {
    string name = 1;
    string coordinates = 2;
    string utcOffset = 3;
    bool hasSummerTime = 4;
    string summerOffset = 5;
    string summerStart = 6;
    string summerEnd = 7;
    string shortName = 8;
}

message Exchange {
    string exchangeId = 1;
    string name = 2;
    string timezone = 3;
    int32 tradingMins = 7;
    int32 preTradingMins = 8;
    int32 afterTradignMins = 9;
    string country = 10;
    string city = 11;
    string localOpen = 12;
    string localClose = 13;
    string utcOpen = 14;
    string utcClose = 15;
    Timezone timezoneObject = 16;
}

// ENUM
enum ProductType {
    MARKET_PRDT = 0;
    USER_PRDT = 1;
}

enum ExistedField {
    ISIN = 0;
    TICKER = 1;
    NAME = 3;
}

// market sector
enum MarketSector {
    OTHERS = 0;
    EQUITY = 1;
    FIXED_INCOME = 2;
    ASSET_BACKED_SECURITY = 3;
    COMMODITY = 4;
    FX = 5;
    FUND = 6;
    SHORT_TERM_INVESTMENT = 7;
    REAL_ESTATE = 8;
    OTHER_ALTERNATIVE = 9;
    STRUCTURE_PRODUCT = 10;
    INDEX = 11;
    CASH = 13;
    NON_BANKABLE = 14;
    FUTURES = 15;
    OPTIONS = 16;
    FORWARD = 17;
    EXPIRED = 18;
    OTHER_DERIVATIEVS = 19;
    USER_PRODUCT = 20;
    LOAN = 21;
}

enum SecurityType {
    OTHER = 0;
    STOCK = 1;
    ETF = 2;
    WARRANT = 3;
    EQUITY_FUTURES = 4;
    EQUITY_OPTIONS = 5;
    OPTIONS_ON_EQUITY_FUTURES = 6;
    EQUITY_FORWARDS = 7;
    EQUITY_SWAPS = 8;
    CORPORATE_BOND = 9;
    MUTUAL_FUND = 10;
    EQUITY_INDEX = 11;
    NON_BANKABLE_MAIN = 12;
    FIXED_INCOME_FUTURES = 13;
    COMMODITY_FUTURES = 14;
    CURRENCY_FUTURES = 15;
    INDEX_FUTURES = 16;
    FIXED_INCOME_OPTIONS = 17;
    OPTIONS_ON_FIXED_INCOME_FUTURES = 18;
    COMMODITY_OPTIONS = 19;
    COMMODITY_FUTURES_OPTIONS = 20;
    CURRENCY_OPTIONS = 21;
    INDEX_OPTION = 22;
    FIXED_INCOME_FORWARDS = 23;
    COMMODITY_FORWARD = 24;
    CURRENCY_FORWARD = 25;
    INDEX_FORWARD = 26;
    EXPIRED_EQUITY = 27;
    EXPIRED_OPTION = 28;
    EXPIRED_FUND = 29;
    TIME_DEPOSIT = 30;
    USER_PRODUCT_MAIN = 31;
    BUSINESS_LOAN = 32;
}

enum Frequency {
    MIN = 0;
    DAILY = 1;
    WEEKLY = 2;
    MONTHLY = 3;
    YEARLY = 4;
}

enum Market {
    USA = 0;
    CHINA_MAINLAND = 1;
    HONGKONG = 2;
}

enum NewsType {
    RECENT_UPCOMING = 0;
    EARNING_RELEASE = 1;
    SIGNIFICANT_DEVELOPMENT = 2;
    TOP = 3;
    EARNING_CALL = 4;
}

enum ErrorReason {
    OTHER_REASON = 0;
    FAILED_TO_GENERATE_GLOBAL_ID = 1;
    CONFLICT_ERROR = 2;
    ASSET_EXISTED = 3;
    INVALID_MARKET_SECTOR = 4;
}

message PricePoint {
    int64 timestamp = 1;
    float price = 2; //  one time extract price
    float closePrice = 3; //  all unsplit price
    float openPrice = 4;
    float highPrice = 5;
    float lowPrice = 6;
    int64 volume = 7;
    float adjustedPrice = 8; //splited price, if split then update all
    float dividend = 9;
    float bid = 10;
    float ask = 11;
}

// API STRUCTURE
message AssetMarketData {
    int64 assetId = 1;
    repeated PricePoint data = 2;
    string globalId = 3;
}

message AssetMarketDataSeries {
    repeated AssetMarketData assetMarketData = 1;
}

message AssetIDGroup {
    int64 assetId = 1;
    string ticker = 2;
    string isin = 3;
    string cusip = 4;
    string name = 5;
    string currency = 6;
    string figi = 7;
    string cik = 8;
    string valoren = 9;
    string sedol = 10;
    string ric = 11;
    string globalId = 12;
}

message Description {
    string companyDescriptions = 1;
    string address = 2;
    string zipCode = 3;
    string phone = 4;
    string website = 5;
    string employees = 6;
    string issuerName = 7;
    string businessSummary = 8;
    string financialSummary = 9;
}

message Asset {
    AssetIDGroup assetIDGroup = 1;
    SecurityType securityType = 4;
    MarketSector marketSector = 5;
    bool userCreated = 6;
    string userId = 7;
    string currency = 8;
    string chineseName = 9;
    string countryOfDomicile = 11;
    Exchange exchange = 12;
    string sector = 13;
    string industry = 14;
    string subIndustry = 15;
    string market = 16;
    string region = 17;
    Description description = 18;
    string contractId = 19;
    repeated string bankAccount = 20;
    string source = 21;
    PricePoint currenctPrice = 22;
    ProductType productType = 23;


    oneof subFields {
        EquityAssetFields equityAsset = 200;
        FundAssetFields fundAsset = 201;
        CurrencyAssetFields currencyAsset = 202;
        FixedInomeAssetFields fixedIncomeAsset = 203;
        NonBankableAssetFields nonBankableAsset = 204;
        TransactionAssetFields transactionAsset = 205;
        FXAssetFields fxAsset = 206;
        UserProductAssetFields userProductAsset = 207;

    }

    int64 version = 999;
    string globalId = 1000;
}

message EquityAssetFields {
    EquityTradingQuote equityTradingQuote = 1;


    oneof subFields {
        StockFundamental stockFundamental = 100;
        ETFFundamental etfFundamental = 101;
    }

    int64 version = 999;
}

message EquityTradingQuote {
    float lastPrice = 1;
    int64 lastUpdateTime = 2;
    float intradayAbsoluteChange = 3;
    float intradayChangePercent = 4;
    float afterHourPrice = 5;
    float afterHourAbsoluteChange = 6;
    float afterHourChangePercent = 7;
    float previousClose = 8;
    float changeFromPreviousClose = 9;
    float percentChangeFromPreviousClose = 10;
    float open = 11;
    float bid = 12;
    float ask = 13;
    float high = 14;
    float low = 15;
    int64 volume = 16;
    float averageVolume = 17;
    float weekHighIn52 = 18;
    float weekLowIn52 = 19;
    int64 weekHighDateIn52 = 36;
    int64 weekLowDateIn52 = 37;
    float YTDChange = 20;
    float YTDChangePercent = 21;
    int64 marketCap = 22;
    int64 sharesOutstanding = 23;
    int64 float = 24;

    float bidAskSpread = 25;
    float nav = 26;
    int64 lastNavUpdatedTime = 27;
    float iNav = 28;
    float iNavPercent = 29;
    int64 lastINavUpdatedTime = 30;
    float totalAssets = 31;
    int64 impliedLiquidity = 32;
    float premiunDiscount = 33;
    float ttmYield = 34;
    float secYield = 35;

    int64 lotSize = 38;
    float pricingMovingAverage50D = 39;
    float pricingMovingAverage150D = 40;
    float pricingMovingAverage200D = 41;
    float volumeMovingAverage10D = 42;
    float volumeMovingAverage25D = 43;
    float volumeMovingAverage50D = 44;
    int32 askSize = 45;
    int32 bidSize = 46;
}

message StockFundamental {
    float beta = 1;
    float YTDReturn = 2;
    float oneYearReturn = 3;
    float fiveYearAnnualReturn = 4;
    float PERatio = 5;
    float PB = 6;
    float EPS = 7;
    float estPE = 8;
    float estPB = 9;
    float estEPS = 10;
    int64 estimateDate = 11;
    float dividend = 12;
    float yield = 13;
    float lastDividend = 14;
    int64 lastDividendAnnouncementDate = 15;
    int64 exDividendDate = 16;
    int64 nextEarningsDate = 17;
    float ROE = 18;
    int64 payDate = 19;
    float EV = 20;
    float TTMRevenuePerShare = 21;
    float MRQBookValuePerShare = 22;
    float TTMGrossMargin = 23;
    float TTMPriceToSales = 24;
    float MRQCashPerShare = 25;
    float TTMCashPerShare = 26;
    float TTMTotalRevenue = 27;
    float TTMEBITD = 28;
    float TTMNIAC = 29;
    float TargetPrice = 30;
    float proJLTGrowthRate = 31;
    float proJPE = 32;
    float proJSales = 33;
    float proJSalesQ = 34;
    float proJEPSQ = 35;
    float proJProfit = 36;
    float proJDPS = 37;
    float dividentYield = 38;
    repeated Officer officer = 39;
}

message Officer {
    string officerName = 1;
    string officerAge = 2;
    string officerTitle = 3;
    string officerStartDate = 4;
}

message ETFFundamental {
    float oneDayTotalReturn = 1;
    float oneWeekTotalReturn = 2;
    float oneMonthTotalReturn = 3;
    float threeMonthTotalReturn = 4;
    float YTDTotalReturn = 5;
    float oneYearTotalReturn = 6;
    float threeYearsTotalReturn = 7;
    float fiveYearsTotalReturn = 8;
    float tenYearsTotalReturn = 9;
    float fifteenYearsTotalReturn = 10;
    float oneYearBeta = 11;
    float threeYearBeta = 12;
    float oneYearStandardDeviation = 13;
    float threeYearStandardDeviation = 14;
    float oneYearSharpeRatio = 15;
    float threeYearSharpeRatio = 16;
    string underlyingIndex = 17;
    float expenseRatioNet = 18;
    float expenseRatioGross = 19;
    int64 inceptionDate = 20;
    string dividendFrequency = 21;
    string morningstarRatings = 22;
    string topTenHoldings = 23;
    string topAssetAllocation = 24;
    string topGeoAllocation = 25;
    string topIndustryAllocation = 26;
    float holdingsTurnover = 27;
    string legalStructure = 28;
    string leveraged = 29;
    float leveragedAmount = 30;
    string activeManaged = 31;
    string swapBased = 32;
    string derivativeBased = 33;
    string currencyHedged = 34;
    string rebalancingFrequency = 35;
    string replicationStrategy = 36;
    string securitiesLending = 37;
    string fundFamily = 38;
    string fundManager = 39;
    string investmentType = 40;
    string investmentObjective = 41;
    string investmentScope = 42;
    string investmentStyle = 43;
    string investmentStrategy = 44;
    string morningstarStyleBox = 45;
    string morningstarCategory = 46;
}

message FundAssetFields {
    FundTradingQuote fundTradingQuote = 1;


    oneof subFields {
        MutualFundamental mutualFundamental = 100;
    }

    int64 fund_version = 999;
}

message FundTradingQuote {
    float nav = 1;
    int64 lastNAVUpdatedTime = 2;
    float navChange = 3;
    float navChangePercent = 4;
    string totalAssetCurrency = 10;
    float totalAssets = 5;
    float TTMYield = 6;
    float SECYield = 7;
    float dividend = 8;
    int64 dividendDate = 9;
    int64 netAssetDate = 11;
}

message MutualFundamental {
    float return20Yr = 1;
    float return15Yr = 2;
    float return10Yr = 3;
    float return5Yr = 4;
    float return3Yr = 5;
    float return1Yr = 6;
    float returnYTD = 7;
    float return6Mth = 8;
    float return3Mth = 9;
    float return1Mth = 10;
    float return1Week = 11;
    float return1Day = 12;
    float returnQTD = 13;
    float returnMTD = 14;
    float returnSinceInception = 15;
    int32 rank20Yr = 16;
    int32 rank15Yr = 17;
    int32 rank10Yr = 18;
    int32 rank5Yr = 19;
    int32 rank3Yr = 20;
    int32 rank1Yr = 21;
    int32 rankYTD = 22;
    int32 rank6Mth = 23;
    int32 rank3Mth = 24;
    int32 rank1Mth = 25;
    int32 rank1Week = 26;
    int32 rank1Day = 27;
    int32 rankMTD = 28;
    int32 rankQTD = 29;
    float categoryReturn20Yr = 30;
    float categoryReturn15Yr = 31;
    float categoryReturn10Yr = 32;
    float categoryReturn5Yr = 33;
    float categoryReturn3Yr = 34;
    float categoryReturn1Yr = 35;
    float categoryReturnYTD = 36;
    float categoryReturn6Mth = 37;
    float categoryReturn3Mth = 38;
    float categoryReturn1Mth = 39;
    float categoryReturn1Week = 40;
    float categoryReturn1Day = 41;
    float categoryReturnQTD = 42;
    float categoryReturnMTD = 43;
    float categoryReturnSinceInception = 44;
    float indexReturn20Yr = 45;
    float indexReturn15Yr = 46;
    float indexReturn10Yr = 47;
    float indexReturn5Yr = 48;
    float indexReturn3Yr = 49;
    float indexReturn1Yr = 50;
    float indexReturnYTD = 51;
    float indexReturn6Mth = 52;
    float indexReturn3Mth = 53;
    float indexReturn1Mth = 54;
    float indexReturn1Week = 55;
    float indexReturn1Day = 56;
    float indexReturnQTD = 57;
    float indexReturnMTD = 58;
    float indexReturnSinceInception = 59;
    int64 riskMeasureDate = 70;
    float beta1Yr = 71;
    float beta3Yr = 72;
    float beta5Yr = 73;
    float beta10Yr = 74;
    float mean1Yr = 75;
    float mean3Yr = 76;
    float mean5Yr = 77;
    float mean10Yr = 78;
    float stdDev1Yr = 79;
    float stdDev3Yr = 80;
    float stdDev5Yr = 81;
    float stdDev10Yr = 82;
    float sharpeRatio1Yr = 83;
    float sharpeRatio3Yr = 84;
    float sharpeRatio5Yr = 85;
    float sharpeRatio10Yr = 86;
    float IR1Yr = 87;
    float IR3Yr = 88;
    float IR5Yr = 89;
    float IR10Yr = 90;
    float alpha1Yr = 91;
    float alpha3Yr = 92;
    float alpha5Yr = 93;
    float alpha10Yr = 94;
    float TR1Yr = 95;
    float TR3Yr = 96;
    float TR5Yr = 97;
    float TR10Yr = 98;
    string fundBenchmark = 99;
    float expenseRatioNet = 100;
    float expenseRatioGross = 101;
    int64 inceptionDate = 102;
    string dividendFrequency = 103;
    float load = 104;
    float frontLoad = 105;
    float backLoad = 106;
    float minInv = 107;
    float minSubsequent = 108;
    string status = 109;
    float earlyWithdrawal = 110;
    string feeLevel = 111;
    string managementFee = 112;
    float performanceFee = 113;
    float fee12b1 = 114;
    int64 ratingDate = 115;
    int32 overallRating = 116;
    int32 numberOfFundsOverall = 117;
    int32 rating3Year = 118;
    int32 numberOfFunds3Year = 119;
    int32 rating5Year = 120;
    int32 numberOfFunds5Year = 121;
    int32 rating10Year = 122;
    int32 numberOfFunds10Year = 123;
    float riskAdjustedReturn3Year = 124;
    float riskAdjustedReturn5Year = 125;
    float riskAdjustedReturn10Year = 126;
    float riskAdjustedReturnOverall = 127;
    int32 performanceScore3Yr = 128;
    int32 performanceScore5Yr = 129;
    int32 performanceScore10Yr = 130;
    int32 performanceScoreOverall = 131;
    int32 riskScore3Year = 132;
    int32 riskScore5Year = 133;
    int32 riskScore10Year = 134;
    int32 riskScoreOverall = 135;
    int64 porfolioDate = 136;
    float holdingsTurnover = 137;
    string legalStructure = 138;
    string leveraged = 139;
    float leveragedAmount = 140;
    string activeManaged = 141;
    string rebalancingFrequency = 142;
    string replicationStrategy = 143;
    string securitiesLending = 144;
    string fundFamily = 145;
    repeated FundManager fundManager = 146;
    string investmentStyle = 147;
    string investmentStrategy = 148;
    repeated Allocation assetAllocation = 149;
    repeated Allocation sectorAllocation = 150;
    repeated Allocation regionAllocation = 151;
    repeated Allocation creditAlllcation = 152;
    repeated Top10Holdings top10Holdings = 153;
    string fundAdvisor = 154;
    string investmentType = 155;
    string investmentObjective = 156;
    string investmentScope = 157;
    int64 netAssetDate = 158;
    int64 categoryEndDate = 159;
    float categorySize1Day = 160;
    float categorySize1Week = 161;
    float categorySize1Mth = 162;
    float categorySize3Mth = 163;
    float categorySize6Mth = 164;
    float categorySize1Yr = 165;
    float categorySize3Yr = 166;
    float categorySize5Yr = 167;
    float categorySize10Yr = 168;
    float categorySize15Yr = 169;
    float categorySize20Yr = 170;
    float categorySizeMTD = 171;
    float categorySizeQTD = 172;
    float categorySizeYTD = 173;
    float cumulativeReturn3Yr = 174;
    float cumulativeReturn5Yr = 175;
    float cumulativeReturn10Yr = 176;
    float cumulativeReturn15Yr = 177;
    float cumulativeReturn20Yr = 178;
    float cumulativeReturnSinceInception = 179;
    string riskCurrency = 180;
    float mean15Yr = 181;
    float mean20Yr = 182;
    float stdDev15Yr = 183;
    float stdDev20Yr = 184;
    float sharpeRatio15Yr = 185;
    float sharpeRatio20Yr = 186;
    float sortinoRatio1Yr = 187;
    float sortinoRatio3Yr = 188;
    float sortinoRatio5Yr = 189;
    float sortinoRatio10Yr = 190;
    float sortinoRatio15Yr = 191;
    float sortinoRatio20Yr = 192;
    float skewness1Yr = 193;
    float skewness3Yr = 194;
    float skewness5Yr = 195;
    float skewness10Yr = 196;
    float skewness15Yr = 197;
    float skewness20Yr = 198;
    float kurtosis1Yr = 199;
    float kurtosis3Yr = 200;
    float kurtosis5Yr = 201;
    float kurtosis10Yr = 202;
    float kurtosis15Yr = 203;
    float kurtosis20Yr = 204;
    float maxDrawdown1Yr = 205;
    float maxDrawdown3Yr = 206;
    float maxDrawdown5Yr = 207;
    float maxDrawdown10Yr = 208;
    float maxDrawdown15Yr = 209;
    float maxDrawdown20Yr = 210;
    int64 annualReportDate = 256;
    int64 portfolioDate = 257;
    repeated Allocation styleboxAllocation = 258;
    repeated CountryAllocation countryAllocatiton = 259;
    repeated Allocation bondSectorAllocation = 263;
    string swapBased = 260;
    string derivativeBased = 261;
    string currencyHedged = 262;
    string categoryIndex = 264;
    string fundBenchmarkMSID = 265;
    string categoryIndexMSID = 266;
    AnnualReturns annuaReturnFund = 267;
    AnnualReturns annualReturnCategory = 268;
    AnnualReturns annaulReturnProspectus = 269;
    RelativeRisks relativeRiskMeasureCategory = 270;
    RelativeRisks relativeRiskMeasureProspectus = 271;
    float changeReturn1Day = 272;
    float changeReturn1Week = 273;
    float changeReturn1Mth = 274;
    float changeReturn3Mth = 275;
    float changeReturn6Mth = 276;
    float changeReturn1Yr = 277;
    float changeReturn3Yr = 278;
    float changeReturn5Yr = 279;
    float changeReturn10Yr = 280;
    float changeReturn15Yr = 281;
    float changeReturn20Yr = 282;
    float changeReturnMTD = 283;
    float changeReturnQTD = 284;
    float changeReturnYTD = 285;
    AnnualReturns categoryReturnChange = 286;
    AnnualReturns indexReturnChange = 287;
    string returnOverall = 288;
    string return3Year = 289;
    string return5Yea = 290;
    string return10Year = 291;
    string riskOverall = 292;
    string risk3Year = 293;
    string risk5Year = 294;
    string risk10Year = 295;
}

message AnnualReturns {
    float annualReturn1 = 1;
    float annualReturn2 = 2;
    float annualReturn3 = 3;
    float annualReturn4 = 4;
    float annualReturn5 = 5;
    float annualReturn6 = 6;
    float annualReturn7 = 7;
    float annualReturn8 = 8;
    float annualReturn9 = 9;
    float annualReturn10 = 10;
}

message RelativeRisks {
    int64 relativeRiskMeasureDate = 1;
    float rsquared1Yr = 2;
    float rsquared3Yr = 3;
    float rsquared5Yr = 4;
    float rsquared10Yr = 5;
    float rsquared15Yr = 6;
    float rsquared20Yr = 7;
    float beta1Yr = 8;
    float beta3Yr = 9;
    float beta5Yr = 10;
    float beta10Yr = 11;
    float beta15Yr = 12;
    float beta20Yr = 13;
    float alpha1Yr = 16;
    float alpha3Yr = 17;
    float alpha5Yr = 18;
    float alpha10Yr = 19;
    float alpha15Yr = 14;
    float alpha20Yr = 15;
    float treynorRatio1Yr = 20;
    float treynorRatio3Yr = 21;
    float treynorRatio5Yr = 22;
    float treynorRatio10Yr = 23;
    float treynorRatio15Yr = 24;
    float treynorRatio20Yr = 25;
    float correlation1Yr = 26;
    float correlation3Yr = 27;
    float correlation5Yr = 28;
    float correlation10Yr = 29;
    float correlation15Yr = 30;
    float correlation20Yr = 31;
    float trackingError1Yr = 32;
    float trackingError3Yr = 33;
    float trackingError5Yr = 34;
    float trackingError10Yr = 35;
    float trackingError15Yr = 36;
    float trackingError20Yr = 37;
    float informationRatio1Yr = 38;
    float informationRatio3Yr = 39;
    float informationRatio5Yr = 50;
    float informationRatio10Yr = 51;
    float informationRatio15Yr = 52;
    float informationRatio20Yr = 53;
    float captureRatioUpside1Yr = 40;
    float captureRatioUpside3Yr = 41;
    float captureRatioUpside5Yr = 42;
    float captureRatioUpside10Yr = 43;
    float captureRatioUpside15Yr = 44;
    float captureRatioUpside20Yr = 45;
    float captureRatioDownside1Yr = 46;
    float captureRatioDownside3Yr = 47;
    float captureRatioDownside5Yr = 48;
    float captureRatioDownside10Yr = 49;
    float captureRatioDownside15Yr = 54;
    float captureRatioDownside20Yr = 55;
    float battingAverage1Yr = 56;
    float battingAverage3Yr = 57;
    float battingAverage5Yr = 58;
    float battingAverage10Yr = 59;
    float battingAverage15Yr = 60;
    float battingAverage20Yr = 61;
}

message FundManager {
    string name = 1;
    int64 startDate = 2;
    string tenure = 3;
}

message AssetAllocation {
    string type = 1;
    float netPercent = 2;
    float indexPercent = 3;
    float CategoryPercent = 4;

    int64 portfolioDate = 5;
    float stockLong = 6;
    float bondLong = 7;
    float preferredLong = 8;
    float convertibleLong = 9;
    float cashLong = 10;
    float otherLong = 11;
    float stockNet = 12;
    float bondNet = 13;
    float preferredNet = 14;
    float convertibleNet = 15;
    float cashNet = 16;
    float otherNet = 17;
    float fundValue = 18;
    float prospectusValue = 19;
    float categoryValue = 20;

}

message SectorAllocation {
    string sector = 1;
    float equityPercent = 2;
    float indexPercent = 3;
    float CategoryPercent = 4;

    int64 portfolioDate = 5;
    float basicMaterials = 6;
    float consumerCyclical = 7;
    float financialServices = 8;
    float realEstate = 9;
    float consumerDefensive = 10;
    float healthcare = 11;
    float utilities = 12;
    float communicationServices = 13;
    float energy = 14;
    float industrials = 15;
    float technology = 16;
    float fundValue = 18;
    float prospectusValue = 19;
    float categoryValue = 20;
    string type = 21;
}

message RegionAllocation {
    string region = 1;
    float equityPercent = 2;
    float indexPercent = 3;
    float CategoryPercent = 4;
    float value = 5;
    int64 portfolioDate = 6;
}

message CreditAlllcation {
    string rating = 1;
    float bondPercent = 2;
    float indexPercent = 3;
    float categoryPercent = 4;

    int64 portfolioDate = 5;
    float fundValue = 6;
    float prospectusValue = 7;
    float categoryValue = 8;
}

message Top10Holdings {
    string name = 1;
    string symbol = 2;
    float assetPercent = 3;
    float sharesOwned = 4;
    float sharesChange = 5;

    string holdingType = 6;
    string countryId = 7;
    string country = 8;
    string currencyId = 9;
    string currency = 10;
    string CUSIP = 11;
    string ISIN = 12;
    float weighting = 13;
    int64 numberOfShare = 14;
    int64 marketValue = 15;
    int64 shareChange = 16;
    int32 sectorId = 17;
    string sector = 18;
    int32 globalSectorId = 19;
    string globalSector = 20;
    string ticker = 21;
    float holdingYTDReturn = 22;
    int64 top10PortfolioDate = 23;
}

message StyleboxAllocation {
    int64 portfolioDate = 1;
    float largeValue = 2;
    float largeBlend = 3;
    float largeGrowth = 4;
    float midValue = 5;
    float midBlend = 6;
    float midGrowth = 7;
    float smallValue = 8;
    float smallBlend = 9;
    float smallGrowth = 10;

    string type = 11;
    float fundValue = 12;
    float prospectusValue = 13;
    float categoryValue = 14;
}

message CountryAllocation {
    string country = 1;
    float fundValue = 2;
    float prospectusValue = 3;
    float categoryValue = 4;
}

message BondSectorAllocation {
    int64 portfolioDate = 1;
    float superSectorCash = 2;
    float sectorCash = 3;
    string type = 4;
    float fundValue = 6;
    float prospectusValue = 7;
    float categoryValue = 8;
}

message Allocation {
    string type = 1;
    int64 portfolioDate = 2;
    float fundValue = 3;
    float prospectusValue = 4;
    float CategoryValue = 5;
}

message FixedInomeAssetFields {
    FixedIncomeTradingQuote fixedIncomeTradingQuote = 1;


    oneof subFields {
        CorporateBond corporateBond = 100;
    }

    int64 version = 999;
}

message FixedIncomeTradingQuote {
    float lastPrice = 1;
    int64 lastUpdateTime = 2;
    float intradayAbsoluteChange = 3;
    float iIntradayChangePercent = 4;
    float previousClose = 5;
    float changeFromPreviousClose = 6;
    float percentChangeFromPreviousClose = 7;
    float lastYield = 8;
    float lastYieldChange = 9;
    float lastYieldChangePercent = 10;
    float lastSpreadToBenchmark = 11;
    string benchmark = 12;
    float bid = 13;
    float ask = 14;
    float high = 15;
    float low = 16;
    float bidYield = 17;
    float askYield = 18;
    int64 volume = 19;
    float open = 20;
    int64 lotSize = 21;
    string couponCurrency = 22;
}

message CorporateBond {
    string bondType = 1;
    string couponType = 2;
    float couponRate = 3;
    float referenceRate = 4;
    float margin = 5;
    float cap = 6;
    float floor = 7;
    string dayCount = 8;
    string ratings = 9;
    string ratingAgency = 10;
    int64 issueDate = 11;
    int64 term = 12;
    int64 maturityDate = 13;
    int64 interestAccrualDate = 14;
    int64 firstSettlementDate = 15;
    int64 firstCouponPaymentDate = 16;
    string couponFrequency = 17;
    int64 payDay = 18;
    string callable = 19;
    int64 nextCallDate = 20;
    float callPrice = 21;
    string putable = 22;
    int64 nextPutDate = 23;
    float putPrice = 24;
    string convertible = 25;
    int64 lastCouponPayment = 26;
    int64 nextCouponPayment = 27;
    int64 nextResetDate = 28;
    string class = 29;
    string rank = 30;
    string series = 31;
    float amountIssued = 32;
    float amountOutstanding = 33;
    float yieldAtOffering = 34;
    float priceAtOffering = 35;
    float spreadAtOffering = 36;
    float duration = 37;
    float convexity = 38;
    string maturityType = 39;
    float accruedInterest = 40;
    int64 remainingTerm = 41;
    float yieldToCall = 42;
    float yieldToPut = 43;
    float yieldToWorst = 44;
    string earlyRedemption = 45;
    string guarantor = 46;
    float delta = 47;
    float swapSpread = 48;
    int32 daysAccrued = 49;
    float convFactor = 50;
    float convRatio = 51;
    float convPremium = 52;
    string couponCurrency = 53;
}

message CurrencyAssetFields {
    int64 version = 999;
}

message NonBankableAssetFields {
    int64 purchaseDate = 1;
    float purchasePrice = 2;
    float LTV = 3;
    float estimatedValue = 4;
    int64 estimatedDate = 5;
}

message UserProductAssetFields {
    string productType = 6;
    int64 purchaseDate = 1;
    float purchasePrice = 2;
    float LTV = 3;
    float estimatedValue = 4;
    int64 estimatedDate = 5;
}

message TransactionAssetFields {
    string bankName = 1;
    string bankAccountNo = 2;
    string transactionId = 3;
    string counterparty = 6;
    string transactionType = 7;
    string settlementCurrency = 8;
    float settlementAmountLCY = 9;
    int32 Quantity = 10;
    string countervalueCrrency = 11;
    int32 countervalueQuantity = 12;
    float executedPriceLCY = 13;
    float amountLCY = 14;
    float interestAmount = 15;
    float exchangeRateSettlementCcy = 16;
    float spotRate = 17;
    float strikePrice = 18;
    float marginLCY = 19;
    float marginPercent = 20;
    float accrualInterestLCY = 21;
    float commissionLCY = 22;
    float otherFeesLCY = 23;
    int64 transactionDate = 24;
    int64 transactionTime = 25;
    int64 valueDate = 26;
    int64 contractDate = 27;
    int64 maturityDate = 28;
    int64 exDate = 29;
    string issuerName = 30;
    float couponRate = 31;
    string series = 32;
    string class = 33;
    string interestRateType = 34;
    string interestCalculationBasis = 35;
    string interestFrequency = 36;
}

message FXAssetFields {
    float lastPrice = 1;
    int64 lastUpdateTime = 2;
    int64 lastUpdateDate = 3;
    float previousClose = 4;
    float changeFromPreviousClose = 5;
    float percentChangeFromPreviousClose = 6;
    float open = 7;
    float bid = 8;
    float ask = 9;
    float high = 10;
    float low = 11;
    float weekHigh52 = 12;
    float weekLow52 = 13;
    float wkHigh = 14;
    float wkLow = 15;
    float monthHigh = 16;
    float monthLow = 17;
    int64 weekHighDate52 = 18;
    int64 weekLowDate52 = 19;
    int64 weekHighDate = 20;
    int64 weekLowDate = 21;
    int64 monthHighDate = 22;
    int64 monthLowDate = 23;
    float mChange3 = 24;
    float mChange6 = 25;
    float MTDChange = 26;
    float YTDChange = 27;
}

//interface request & result
message SearchRequest {
    int64 assetId = 1;
    string searchString = 2;
    MarketSector assetType = 3;
    string userId = 4;
    repeated string bankAccount = 5;
    ProductType productType = 6;
    bool hasAssetAliasId = 7;
    bool hasAssetAttachment = 8;
    repeated int64 assetTagChoiceId = 9;
    int32 maxHit = 10;
    bool isTagged = 11;
    string currency = 12;
    string globalId = 13;
}

message SearchResult {
    repeated Asset asset = 1;
}

message RetrieveAssetId {
    string isin = 1;
    string cusip = 2;
    string figi = 3;

    string accountId = 4;

    string name = 5;
    string ticker = 6;
    string currency = 7;
    string cik = 8;
    string valoren = 9;
    string sedol = 10;
    string contractId = 11;
    SecurityType securityType = 12;
    string cash = 13;
    MarketSector marketSecotr = 14;
    Exchange exchange = 15;
}

message RetrieveAssetIdRequest {
    repeated RetrieveAssetId retrieveAssetId = 1;
}

message RetrieveAssetIdResult {
    repeated AssetIDGroup assetIDGroup = 1;
}

message RetrieveCurrencyRateRequest {
    int64 baseCurrencyAssetId = 1;
    repeated int64 counterCurrencyAssetId = 2;
    string baseCurrency = 3;
    repeated string counterCurrency = 4;
    string baseCurrencyGlobalId = 5;
    repeated string counterCurrencyGlobalId = 6;
}

message RetrieveCurrencyRate {
    int64 counterCurrencyAssetId = 1;
    float rate = 2;
    string counterCurrency = 3;
    string counterGlobalId = 4;
}

message RetrieveCurrencyRateResult {
    repeated RetrieveCurrencyRate retrieveCurrencyRate = 1;
}

message RetrieveHistoryCurrencyRateRequest {
    int64 baseCurrencyAssetId = 1;
    repeated int64 counterCurrencyAssetId = 2;
    int64 startTime = 3;
    int64 endTime = 4;
    string baseCurrency = 5;
    repeated string counterCurrency = 6;
    string baseGlobalId = 7;
    repeated string counterGlobalId = 8;
}

message RetrieveHistoryCurrencyRateResult {
    repeated HistoryCurrency historyCurrency = 1;
}

message HistoryCurrencyRate {
    int64 timeStamp = 1;
    float rate = 2;
}

message HistoryCurrency {
    int64 counterCurrencyAssetId = 1;
    repeated HistoryCurrencyRate historyCurrencyRate = 2;
    string counterCurrency = 3;
    string counterGloablId = 4;
}

message AssetRequest {
    repeated int64 assetId = 1;
    string fields = 2;
    repeated string globalId = 3;
}

message AssetResult {
    repeated Asset asset = 1;
}

message AssetDataRequest {
    repeated int64 assetId = 1;
    int64 startTime = 2;
    int64 endTime = 3;
    Frequency frequency = 4;
    bool fillMissing = 5;
    repeated string globalId = 6;
}

message CreateUserProductRequest {
    repeated Asset asset = 1;
}

message CreateUserProduct {
    bool success = 1;
    int64 assetId = 2;
    ExistedField existedField = 3;
    string globalId = 4;
    ErrorReason errorReason = 5;
    Asset asset = 6;
}

message CreateUserProductResult {
    repeated CreateUserProduct createUserProduct = 1;
}

message UpdateUserProductRequest {
    Asset asset = 1;
    AssetMarketDataSeries assetSeries = 2;
}

message UpdateUserProductResult {
    bool success = 1;
}

message CheckUserProductRequest {
    AssetIDGroup assetIdGroup = 1;
    string accountId = 2;
    string currency = 3;
    MarketSector marketSector = 4;
    Exchange exchange = 5;
}

message CheckUserProductResult {
    bool isExist = 1;
    int64 assetId = 2;
    ExistedField existedField = 3;
    string globalId = 4;
    ErrorReason errorReason = 5;
}

message UpdateAssetMarketDataRequest {
    repeated UpdateAssetMarketData updateAssetMarketData = 1;
}

message UpdateAssetMarketData {
    int64 assetId = 1;
    repeated PricePoint pricePoint = 2;
    string globalId = 3;
}

message UpdateAssetMarketDataResult {
    bool success = 1;
}

message ListAllUserProductRequest {
    string accountId = 1;
}

message ListAllUserProductResult {
    repeated AssetIDGroup assetIDGroup = 1;
}

message RefreshDataRequest {
    string refreshType = 1;
}

message RefreshDataResult {
    bool success = 1;
}

message DeleteUserProductRequest {
    repeated int64 assetId = 1;
    repeated string globalId = 2;
}

message DeleteUserProductResult {
    repeated DeleteUserProduct deleteUserProduct = 1;
}

message DeleteUserProduct {
    int64 assetId = 1;
    bool success = 2;
    string globalId = 3;
    ErrorReason errorReason = 4;
}

message AddAssetTagCategoryRequest {
    string appId = 1;
    string assetTagCategoryName = 2;
}

message AddAssetTagCategoryResult {
    bool success = 1;
    int64 assetTagCategoryId = 2;
}

message RetrieveAllAssetTagRequest {
    string appId = 1;
}

message RetrieveAllAssetTagResult {
    bool success = 1;
    repeated AssetTagObject assetTagObject = 2;
}

message AssetTagObject {
    int64 assetTagCategoryId = 1;
    string assetTagCategoryName = 2;
    repeated AssetTagData assetTags = 3;
    bool emptyTags = 4;
    bool nameEditable = 5;
    bool contentEditable = 6;
}

message AssetTagData {
    int64 assetTagId = 1;
    string assetTagName = 2;
    int64 assetTagTypeId = 3;
    string assetTagTypeName = 4;
    string assetTagInputContent = 5;
    repeated AssetTagChoiceDataObject assetTagChoices = 6;
    bool assetTagScenarioSelected = 7;
    float assetTagScenarioIncomePerYear = 8;
    float assetTagScenarioReturnExpectation = 9;
    string assetTagScenarioIncomePerYearStr = 10;
    string assetTagScenarioReturnExpectationStr = 11;
}

message AssetTagChoiceDataObject {
    int64 assetTagChoiceId = 1;
    string assetTagChoiceName = 2;
    bool selected = 3;
}

message EditAssetTagCategoryRequest {
    string appId = 1;
    int64 assetTagCategoryId = 2;
    string assetTagCategoryName = 3;
}

message EditAssetTagCategoryResult {
    bool success = 1;
    string errorMessage = 2;
}

message RemoveAssetTagCategoryRequest {
    string appId = 1;
    int64 assetTagCategoryId = 2;
}

message RemoveAssetTagCategoryResult {
    bool success = 1;
}

message RetrieveAssetTagTypeRequest {
    string appId = 1;
}

message RetrieveAssetTagTypeResult {
    bool success = 1;
    repeated AssetTagType assetTagType = 2;
}

message AssetTagType {
    int64 assetTagTypeId = 1;
    string assetTagTypeName = 2;
    string appId = 3;
}

message AddAssetTagRequest {
    string appId = 1;
    int64 assetTagCategoryId = 2;
    AssetTagData assetTagData = 3;
}

message AddAssetTagResult {
    bool success = 1;
    int64 assetTagId = 2;
}

message EditAssetTagRequest {
    string appId = 1;
    int64 assetTagCategoryId = 2;
    AssetTagData assetTagData = 3;
}

message EditAssetTagResult {
    bool success = 1;
    string errorMessage = 2;
}

message RemoveAssetTagRequest {
    string appId = 1;
    int64 assetTagId = 2;
}

message RemoveAssetTagResult {
    bool success = 1;
}

message RetrieveAssignedTagRequest {
    string appId = 1;
    int64 assetId = 2;
    bool allTags = 3;
}

message RetrieveAssignedTagResult {
    bool success = 1;
    repeated AssetTagObject assetTagObject = 2;
    bool emptyTags = 3;
}

message SaveAssignedTagRequest {
    string appId = 1;
    int64 assetId = 2;
    repeated AssetTagData assetTagData = 3;
}

message SaveAssignedTagResult {
    bool success = 1;
}

message AggregateAssetIdsByChoiceRequest {
    string appId = 1;
    int64 assetTagId = 2;
    repeated int64 assetId = 3;
}

message AggregateAssetIdsByChoiceResult {
    bool success = 1;
    repeated AssetTagRelationData assetTagRelationData = 2;
}

message RetrieveAssetByScenarioRequest {
    string appId = 1;
}

message RetrieveAssetByScenarioResult {
    bool success = 1;
    repeated AssetTagRelationData assetTagRelationData = 2;
}

message AssetTagRelationData {
    int64 assetTagId = 1;
    int64 assetId = 2;
    int64 assetTagChoiceId = 3;
    string assetTagChoiceName = 4;
}

message RetrieveTaggedAssetsRequest {
    string appId = 1;
    int64 assetTagId = 2;
    bool requestAll = 3;
}

message RetrieveTaggedAssetsResult {
    bool success = 1;
    repeated int64 assetId = 2;
}

message RetrieveTaglistByTagTypeRequest {
    string appId = 1;
    string tagType = 2;
}

message RetrieveTaglistByTagTypeResult {
    bool success = 1;
    repeated AssetTagData assetTagData = 2;
}

message RetrieveAssetAliasRequest {
    string appId = 1;
    int64 assetId = 2;
    bool retrieveAll = 3;
}

message RetrieveAssetAliasResult {
    bool success = 1;
    repeated AssetAliasData assetAliasData = 2;
}

message AssetAliasData {
    int64 assetAliasId = 1;
    int64 assetId = 2;
    string assetAlias = 3;
    int64 insertTime = 4;
    string appId = 5;
    string assetName = 6;
}

message RetrieveAssetFileRequest {
    string appId = 1;
    int64 assetId = 2;
    bool retrieveAll = 3;
}

message RetrieveAssetFileResult {
    bool success = 1;
    repeated AssetFileData assetFileData = 2;
}

message AssetFileData {
    int64 assetFileId = 1;
    int64 assetId = 2;
    int64 fileId = 3;
    int64 insertTime = 4;
    string appId = 5;
}

message AddAssetAliasRequest {
    AssetAliasData assetAliasData = 1;
}

message AddAssetAliasResult {
    bool success = 1;
    int64 assetAliasId = 2;
}

message AddAssetFileRequest {
    AssetFileData assetFileData = 1;
}

message AddAssetFileResult {
    bool success = 1;
    int64 assetFileId = 2;
}

message EditAssetAliasRequest {
    AssetAliasData assetAliasData = 1;
}

message EditAssetAliasResult {
    bool success = 1;
}

message EditAssetFileRequest {
    AssetFileData assetFileData = 1;
}

message EditAssetFileResult {
    bool success = 1;
}

message RemoveAssetAliasRequest {
    int64 assetAliasId = 1;
}

message RemoveAssetAliasResult {
    bool success = 1;
}

message RemoveAssetFileRequest {
    int64 assetFileId = 1;
}

message RemoveAssetFileResult {
    bool success = 1;
}

message CountryInfoResult {
    repeated CountryInfo countryInfo = 1;
}

message CountryInfo {
    string countryCode = 1;
    string countryName = 2;
    string regionCode = 3;
    string regionName = 4;
}

message ExchangeInfoResult {
    repeated Exchange exchange = 1;
}

message ListAllRequest {
    bool needAll = 1;
    string code = 2;
}

message AssetTagRecord {
    int64 recordId = 1;
    int64 assetId = 2;
    int64 assetTagId = 3;
    string assetTagValue = 4;
    int64 insertTime = 5;
}

message AssetTagRecordRequest {
    int64 assetId = 1;
    int64 assetTagId = 2;
}

message AssetTagRecordResult {
    bool success = 1;
    repeated AssetTagRecord assetTagRecord = 2;
}

// top level data platform definition
service DataPlatform {
    // search dmp and get the assetIdList back (support ISIN and TICKER)
    rpc search (SearchRequest) returns (SearchResult) {
    }

    // retreve asset id
    rpc retrieveAssetId (RetrieveAssetIdRequest) returns (RetrieveAssetIdResult) {
    }

    // retrieve currency rate
    rpc retrieveCurrencyRate (RetrieveCurrencyRateRequest) returns (RetrieveCurrencyRateResult) {
    }

    // retrieve history currency rate
    rpc retrieveHistoryCurrencyRate (RetrieveHistoryCurrencyRateRequest) returns (RetrieveHistoryCurrencyRateResult) {
    }

    // get asset metadata back
    rpc queryAsset (AssetRequest) returns (AssetResult) {
    }

    rpc queryTrashAsset (AssetRequest) returns (AssetResult) {
    }

    // get asset market data series data back
    rpc queryAssetMarketDataSeries (AssetDataRequest) returns (AssetMarketDataSeries) {
    }

    rpc queryLastAssetMarketDataSeries (AssetDataRequest) returns (AssetMarketDataSeries) {
    }

    // create user product
    rpc createUserProduct (CreateUserProductRequest) returns (CreateUserProductResult) {
    }

    // update user product market price
    rpc updateUserProduct (UpdateUserProductRequest) returns (UpdateUserProductResult) {
    }

    rpc deleteUserProduct (DeleteUserProductRequest) returns (DeleteUserProductResult) {
    }

    rpc checkUserProductExist (CheckUserProductRequest) returns (CheckUserProductResult) {
    }

    rpc updateAssetMarketDataSeries (UpdateAssetMarketDataRequest) returns (UpdateAssetMarketDataResult) {
    }

    rpc listAllUserProduct (ListAllUserProductRequest) returns (ListAllUserProductResult) {
    }

    rpc refreshAssetData (RefreshDataRequest) returns (RefreshDataResult) {
    }

    rpc retrieveAllAssetTag (RetrieveAllAssetTagRequest) returns (RetrieveAllAssetTagResult) {
    }

    rpc addAssetTagCategory (AddAssetTagCategoryRequest) returns (AddAssetTagCategoryResult) {
    }

    rpc editAssetTagCategory (EditAssetTagCategoryRequest) returns (EditAssetTagCategoryResult) {
    }

    rpc removeAssetTagCategory (RemoveAssetTagCategoryRequest) returns (RemoveAssetTagCategoryResult) {
    }

    rpc retrieveAssetTagType (RetrieveAssetTagTypeRequest) returns (RetrieveAssetTagTypeResult) {
    }

    rpc addAssetTag (AddAssetTagRequest) returns (AddAssetTagResult) {
    }

    rpc editAssetTag (EditAssetTagRequest) returns (EditAssetTagResult) {
    }

    rpc removeAssetTag (RemoveAssetTagRequest) returns (RemoveAssetTagResult) {
    }

    rpc retrieveAssignedTag (RetrieveAssignedTagRequest) returns (RetrieveAssignedTagResult) {
    }

    rpc saveAssignedTag (SaveAssignedTagRequest) returns (SaveAssignedTagResult) {
    }

    rpc aggregateAssetIdsByChoice (AggregateAssetIdsByChoiceRequest) returns (AggregateAssetIdsByChoiceResult) {
    }

    rpc retrieveTaggedAssets (RetrieveTaggedAssetsRequest) returns (RetrieveTaggedAssetsResult) {
    }

    rpc retrieveTaglistByTagType (RetrieveTaglistByTagTypeRequest) returns (RetrieveTaglistByTagTypeResult) {
    }

    rpc retrieveAssetByScenario (RetrieveAssetByScenarioRequest) returns (RetrieveAssetByScenarioResult) {
    }

    rpc retrieveAssetAlias (RetrieveAssetAliasRequest) returns (RetrieveAssetAliasResult) {
    }

    rpc retrieveAssetFile (RetrieveAssetFileRequest) returns (RetrieveAssetFileResult) {
    }

    rpc addAssetAlias (AddAssetAliasRequest) returns (AddAssetAliasResult) {
    }

    rpc addAssetFile (AddAssetFileRequest) returns (AddAssetFileResult) {
    }

    rpc editAssetAlias (EditAssetAliasRequest) returns (EditAssetAliasResult) {
    }

    rpc editAssetFile (EditAssetFileRequest) returns (EditAssetFileResult) {
    }

    rpc removeAssetAlias (RemoveAssetAliasRequest) returns (RemoveAssetAliasResult) {
    }

    rpc removeAssetFile (RemoveAssetFileRequest) returns (RemoveAssetFileResult) {
    }

    rpc listAllCountryInfo (ListAllRequest) returns (CountryInfoResult) {
    }

    rpc listAllExchangeInfo (ListAllRequest) returns (ExchangeInfoResult) {
    }

    rpc queryAssetTagRecord (AssetTagRecordRequest) returns (AssetTagRecordResult) {
    }

    //useless news
    rpc retrieveNewsHeadlines (RetrieveNewsRequest) returns (RetrieveNewsResult) {
    }

    rpc retrieveNewsStory (RetrieveNewsStoryRequest) returns (RetrieveNewsStoryResult) {
    }

    rpc getRelevantNews (GetRelevantNewsRequest) returns (GetRelevantNewsResult);
    rpc getKeywordsByNews (GetKeywordsRequest) returns (GetKeywordsResult);
    rpc getNewsRecurrentInfo (GetNewsRecurrentInfoRequest) returns (GetNewsRecurrentInfoResult);
    rpc getWord2WordRelationship (GetWord2WordRelRequest) returns (GetWord2WordRelResult);
    rpc getNews (GetNewsRequest) returns (GetNewsResult);
}

message RetrieveNewsResult {
    repeated AssetNews assetNews = 1;
}

message RetrieveNewsRequest {
    repeated int64 assetId = 1;
    repeated NewsType newsType = 2;
}

message AssetNews {
    int64 assetId = 1;
    repeated NewsHeadline news = 2;
}

message NewsHeadline {
    string newsId = 1;
    string headline = 2;
    NewsType newsType = 3;
    string newsContent = 4;
    int64 createTime = 5;

    oneof subFields {
        RecentUpcomingFields recentUpcomingFields = 100;
        EarningReleaseFields earningReleaseFields = 101;
        SignificantDevelopmentFields significantDevelopmentFields = 102;
        TopFields topFields = 103;
        EarningCallFields earningCallFields = 104;
    }
}

message RecentUpcomingFields {
    string status = 1;
    int64 creationTime = 2;
    int64 revisionTime = 3;
    int64 localTime = 4;
    string provider = 5;
    string attribution = 6;
    string urgency = 7;
    string type = 8;
    string companies = 9;
    string topics = 10;
    string products = 11;
}

message EarningReleaseFields {
    int64 endTime = 1;
    string endQualifier = 2;
    bool isEstimate = 3;
    int64 startTime = 4;
    string startQualifier = 5;
    int64 lastUpdateTime = 6;
}

message SignificantDevelopmentFields {
    string description = 1;
    bool frontPage = 2;
    int64 sourceDate = 3;
    int64 initiationDate = 4;
    int64 lastUpdateDate = 5;
    int32 significance = 6;
    repeated Topic topic = 7;
}

message Topic {
    string code = 1;
    string value = 2;
}

message TopFields {
    string source = 1;
    string content = 2;
}

message EarningCallFields {
    int64 endTime = 1;
    string endQualifier = 2;
    bool isEstimate = 3;
    int64 startTime = 4;
    string startQualifier = 5;
    int64 lastUpdateTime = 6;
}

message NewsStory {
    string newsId = 1;
    string newsStory = 2;
    NewsHeadline newsHeadline = 3;
}

message RetrieveNewsStoryRequest {
    repeated NewsHeadline newsHeadline = 1;
}

message RetrieveNewsStoryResult {
    repeated NewsStory newsStory = 1;
}

//news releated
message GetRelevantNewsRequest {
    enum RequestType {
        NEWS = 0;
        KEYWORD = 1;
    }
    RequestType type = 1;
    string newsId = 2;
    string keyword = 3;
}

message GetRelevantNewsResult {
    repeated EventsItem news = 1;
}

message GetKeywordsRequest {
    string context = 1;
    string newsId = 2;
}

message GetKeywordsResult {
    repeated KnowledgeGraphNodeElement keywords = 1;
}

message GetNewsRecurrentInfoRequest {
    int64 newsId = 1;
}

message RecurrentPrediction {
    int64 nextOccuranceTime = 1;
    int64 predictTimeRange = 2;
}

message GetNewsRecurrentInfoResult {
    bool isRecurrent = 1;
    int64 recurrentCycle = 2;
    RecurrentPrediction prediction = 3;
    repeated int64 historicalNews = 4;
}

message GetWord2WordRelRequest {
    string wordFrom = 1;
    repeated string wordTo = 2;
}

message KnowledgeGraphEdgeElement {
    string srcNodeId = 1;
    string dstNodeId = 2;
    string srcNodeType = 3;
    string dstNodeType = 4;
    string relationship = 5;
}

message KnowledgeGraphNodeElement {
    string nodeId = 1;
    string name = 2;
    repeated string types = 3;
}

message GetWord2WordRelResult {
    repeated KnowledgeGraphNodeElement nodes = 1;
    repeated KnowledgeGraphEdgeElement edges = 2;
}

message EventTag {
    string id = 1;
    double relevance_score = 2;
}

message EventsItem {
    repeated string asset_ids = 1;
    repeated EventTag tags = 2;
    string external_ref = 3;
    string raw_title = 4;
    string raw_content = 5;
    string title = 6;
    string content = 7;
    string event_type = 8;
    int64 timestamp = 9;
    string source = 10;
    string event_id = 11;
}

message EventsIndexItem {
    string event_id = 1;
    int64 timestamp = 2;
}

message GetNewsRequest {
    string newsId = 1;
}

message GetNewsResult {
    EventsItem news = 1;
}

message KeywordNode {
    string id = 1;
    string name = 2;
}

message CorpusItem {
    string word = 1;
    repeated float vectors = 2;
}